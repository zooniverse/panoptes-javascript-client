// Generated by CoffeeScript 2.7.0
(function() {
  var DEFAULT_HEADERS, credentialRequest, getsInProgress, makeCredentialHTTPRequest, makeHTTPRequest, makeRequest, normalizeUrl, parseJSON, request, superagent;

  superagent = require('superagent');

  DEFAULT_HEADERS = require('./default-headers');

  normalizeUrl = require('normalizeurl');

  getsInProgress = {};

  // Superagent will only auto-parse responses from a Content-Type header it recognizes.
  // Add the Accept in use by the JSON API spec, which is what will be sent back from the server.
  parseJSON = superagent.parse['application/json'];

  superagent.parse[DEFAULT_HEADERS['Accept']] = parseJSON;

  // isolate the credential requests from the superagent singleton
  // via the agent() to ensure correct credentials for both request types
  // http://visionmedia.github.io/superagent/#agents-for-global-state
  request = superagent;

  credentialRequest = superagent;

  if (superagent.agent != null) {
    request = superagent.agent();
    credentialRequest = superagent.agent();
    if (credentialRequest.withCredentials != null) {
      credentialRequest = credentialRequest.withCredentials();
    }
  }

  makeHTTPRequest = function(method, url, data, headers = {}, query) {
    return makeRequest(request, method, url, data, headers, query);
  };

  makeCredentialHTTPRequest = function(method, url, data, headers = {}, query) {
    return makeRequest(credentialRequest, method, url, data, headers, query);
  };

  makeRequest = function(request, method, url, data, headers, query) {
    var key, originalArguments, promisedRequest, requestID, value;
    originalArguments = Array.prototype.slice.call(arguments); // In case we need to retry
    method = method.toLowerCase();
    url = normalizeUrl(url);
    if (method === 'get') {
      for (key in data) {
        value = data[key];
        if (Array.isArray(value)) {
          data[key] = value.join(',');
        }
      }
      requestID = `${url} ${JSON.stringify(data)}`;
      if (getsInProgress[requestID] != null) {
        return getsInProgress[requestID];
      }
    }
    promisedRequest = new Promise(function(resolve, reject) {
      var req;
      req = (function() {
        switch (method) {
          case 'get':
            return request.get(url).query(data);
          case 'head':
            return request.head(url).query(data);
          case 'put':
            return request.put(url).query(query).send(data);
          case 'post':
            return request.post(url).query(query).send(data);
          case 'delete':
            return request.del(url).query(query).query(data);
        }
      })();
      req = req.set(headers);
      return req.end(function(error, response) {
        delete getsInProgress[requestID];
        if ((error != null ? error.status : void 0) === 408) {
          return resolve(makeHTTPRequest.apply(null, originalArguments));
        } else if (error != null) {
          // Prefer rejecting with the response, since it'll have more specific information.
          // TODO: Reject with the error as expected and access the response through `error.response` in the handler.
          return reject(response != null ? response : error);
        } else {
          return resolve(response);
        }
      });
    });
    if (method === 'get') {
      getsInProgress[requestID] = promisedRequest;
    }
    return promisedRequest;
  };

  module.exports = {makeHTTPRequest, makeCredentialHTTPRequest};

}).call(this);
