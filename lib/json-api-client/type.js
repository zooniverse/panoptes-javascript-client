// Generated by CoffeeScript 2.7.0
(function() {
  var Emitter, Resource, Type, mergeInto,
    indexOf = [].indexOf;

  Emitter = require('./emitter');

  Resource = require('./resource');

  mergeInto = require('./merge-into');

  module.exports = Type = (function() {
    class Type extends Emitter {
      constructor(_name, _client) {
        super(null);
        this._name = _name;
        this._client = _client;
        this._links = {};
        this._resourcesCache = {};
        if (!(this._name && (this._client != null))) {
          throw new Error('Don\'t call the Type constructor directly, use `client.type("things");`');
        }
      }

      create(data = {}, headers = {}, meta = {}) {
        var key, ref, resource, value;
        if (data.type && data.type !== this._name) {
          // The `type` specified by the resource trumps whatever you tried to create it as.
          return this._client.type(data.type).create(...arguments);
        } else {
          resource = (ref = this._resourcesCache[data.id]) != null ? ref : new this.Resource(this);
          mergeInto(resource._headers, headers);
          mergeInto(resource._meta, meta);
          if (data.id != null) {
            for (key in data) {
              value = data[key];
              if ((indexOf.call(resource._changedKeys, key) < 0) && (!(key in resource._savingKeys))) {
                resource[key] = value;
              }
            }
            this._resourcesCache[resource.id] = resource;
            resource.emit('change');
          } else {
            resource.update(data);
          }
          return resource;
        }
      }

      get() {
        return new Resource.Promise(typeof arguments[0] === 'string' ? this._getByID(...arguments) : Array.isArray(arguments[0]) ? this._getByIDs(...arguments) : this._getByQuery(...arguments));
      }

      _getByID(id, ...otherArgs) {
        return this._getByIDs([id], ...otherArgs).then(function([resource]) {
          return resource;
        });
      }

      _getByIDs(ids, ...otherArgs) {
        var id, requests;
        requests = (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = ids.length; i < len; i++) {
            id = ids[i];
            if (id in this._resourcesCache && (otherArgs.length === 0 || (otherArgs[0] == null))) {
              results.push(Promise.resolve(this._resourcesCache[id]));
            } else {
              results.push(this._client.get(this._getURL(id), ...otherArgs).then(function([resource]) {
                return resource;
              }));
            }
          }
          return results;
        }).call(this);
        return Promise.all(requests);
      }

      _getByQuery(query, ...otherArgs) {
        return this._client.get(this._getURL(), query, ...otherArgs);
      }

      _getURL() {
        return ['', this._name, ...arguments].join('/');
      }

    };

    Type.prototype.Resource = Resource;

    Type.prototype._name = '';

    Type.prototype._client = null;

    Type.prototype._links = null; // Resource link definitions

    Type.prototype._resourcesCache = null;

    return Type;

  }).call(this);

}).call(this);
